{"version":3,"file":"purify.js","sourceRoot":"","sources":["../src/purify.ts"],"names":[],"mappings":";;AAAA,gFAAgF;AAChF,IAAM,kBAAkB,GAAG,yDAAyD,CAAC;AAErF,0BAA0B;AAC1B,gBAAuB,OAAe;IAEpC,IAAM,iBAAiB,GAAG,UAAU,CAAC,OAAO,EAAE,kBAAkB,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IAE/E,IAAM,UAAU,GAAG,OAAO;SAEvB,OAAO,CACN,+GAA+G,EAC/G,4DAA4D,CAC7D;SAEA,OAAO;IACN,2CAA2C;IAC3C,uKAAuK,EACvK,oFAAoF,CACrF;SAEA,OAAO,CACN,IAAI,MAAM,CAAC,QAAM,iBAAiB,4CAAyC,EAAE,IAAI,CAAC,EAClF,mBAAmB,CACpB;SAEA,OAAO,CACN,IAAI,MAAM,CAAC,QAAM,iBAAiB,0DAAuD,EAAE,IAAI,CAAC,EAChG,mBAAmB,CACpB;SAEA,OAAO,CACN,oFAAoF,EACpF,iBAAiB,CAClB;SACA,OAAO,CACN,iEAAiE,EACjE,IAAI,CACL,CAAC;IAEJ,MAAM,CAAC,UAAU,CAAC;AACpB,CAAC;AArCD,wBAqCC;AAED,oBAAoB,GAAW,EAAE,KAAa,EAAE,KAAa;IAC3D,IAAI,OAAO,GAAa,EAAE,CAAC;IAC3B,IAAI,KAAK,CAAC;IACV,qDAAqD;IACrD,OAAO,KAAK,GAAG,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC;QAC/B,OAAO,GAAG,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;IACpD,CAAC;IACD,MAAM,CAAC,OAAO,CAAC;AACjB,CAAC","sourcesContent":["// This matches a comment left by the ngo-loader that contains pure import paths\r\nconst importCommentRegex = /\\/\\*\\* PURE_IMPORTS_START (\\S+) PURE_IMPORTS_END \\*\\//mg;\r\n\r\n// TODO: handle sourcemaps\r\nexport function purify(content: string) {\r\n\r\n  const pureImportMatches = getMatches(content, importCommentRegex, 1).join('|');\r\n\r\n  const newContent = content\r\n    /* wrap TS 2.2 enums w/ an IIFE */\r\n    .replace(\r\n      /var (\\S+) = \\{\\};\\r?\\n(\\1\\.(\\S+) = \\d+;\\r?\\n)+\\1\\[\\1\\.(\\S+)\\] = \"\\4\";\\r?\\n(\\1\\[\\1\\.(\\S+)\\] = \"\\S+\";\\r?\\n*)+/mg,\r\n      'var $1 = /*@__PURE__*/(function() {\\n$&; return $1;})();\\n',\r\n    )\r\n    /* wrap TS 2.3 enums w/ an IIFE */\r\n    .replace(\r\n      // tslint:disable-next-line:max-line-length\r\n      /var (\\S+);(\\/\\*@__PURE__\\*\\/)*\\r?\\n\\(function \\(\\1\\) \\{\\s+(\\1\\[\\1\\[\"(\\S+)\"\\] = 0\\] = \"\\4\";(\\s+\\1\\[\\1\\[\"\\S+\"\\] = \\d\\] = \"\\S+\";)*\\r?\\n)\\}\\)\\(\\1 \\|\\| \\(\\1 = \\{\\}\\)\\);/mg,\r\n      'var $1 = /*@__PURE__*/(function() {\\n    var $1 = {};\\n    $3    return $1;\\n})();',\r\n    )\r\n    /* Prefix safe imports with pure */\r\n    .replace(\r\n      new RegExp(`(_(${pureImportMatches})__ = )(__webpack_require__\\\\(\\\\S+\\\\);)`, 'mg'),\r\n      '$1/*@__PURE__*/$3',\r\n    )\r\n    /* Prefix default safe imports with pure */\r\n    .replace(\r\n      new RegExp(`(_(${pureImportMatches})___default = )(__webpack_require__\\\\.\\\\w\\\\(\\\\S+\\\\);)`, 'mg'),\r\n      '$1/*@__PURE__*/$3',\r\n    )\r\n    /* Prefix CCF and CMF statements */\r\n    .replace(\r\n      /__WEBPACK_IMPORTED_MODULE_\\d+__angular_core__\\[\"_?\\w+\" \\/\\* (ɵccf|ɵcmf) \\*\\/\\]\\(/mg,\r\n      '/*@__PURE__*/$&',\r\n    )\r\n    .replace(\r\n      /\\/\\*\\*\\r?\\n\\s*\\*\\s?@license.*\\r?\\n(\\s*\\*[^\\/].*\\r?\\n)*\\s*\\*\\//mg,\r\n      '\\n',\r\n    );\r\n\r\n  return newContent;\r\n}\r\n\r\nfunction getMatches(str: string, regex: RegExp, index: number) {\r\n  let matches: string[] = [];\r\n  let match;\r\n  // tslint:disable-next-line:no-conditional-assignment\r\n  while (match = regex.exec(str)) {\r\n    matches = matches.concat(match[index].split(','));\r\n  }\r\n  return matches;\r\n}\r\n"]}