{"version":3,"file":"ngo.js","sourceRoot":"","sources":["../src/ngo.ts"],"names":[],"mappings":";;AAAA,yBAAkC;AAElC,IAAM,WAAW,GAAG,OAAO,CAAC,cAAc,CAAC,CAAC;AAE5C,2CAAsD;AACtD,+CAA2D;AAC3D,uDAAmE;AACnE,2CAAuD;AACvD,+DAA6D;AAG7D,IAAM,cAAc,GAAG,YAAY,CAAC;AACpC,IAAM,mBAAmB,GAAG,gBAAgB,CAAC;AAC7C,IAAM,cAAc,GAAG,kDAAkD,CAAC;AAU1E,aAAoB,OAAmB;IACrC,OAAO,CAAC,aAAa,GAAG,CAAC,CAAC,OAAO,CAAC,aAAa,CAAC;IACxC,IAAA,qCAAa,EAAE,qCAAa,EAAE,uCAAc,EAAE,uBAAM,CAAa;IACnE,IAAA,yBAAO,CAAa;IAE1B,EAAE,CAAC,CAAC,CAAC,aAAa,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;QAC/B,MAAM,IAAI,KAAK,CAAC,0DAA0D,CAAC,CAAC;IAC9E,CAAC;IAED,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;QACb,OAAO,GAAG,iBAAY,CAAC,aAAuB,EAAE,OAAO,CAAC,CAAC;IAC3D,CAAC;IAED,uCAAuC;IACvC,IAAM,aAAa,GAAG,EAAE,CAAC;IAEzB,EAAE,CAAC,CAAC,cAAc,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QACjC,aAAa,CAAC,IAAI,CAAC,wCAAyB,CAAC,CAAC;IAChD,CAAC;IAGD,EAAE,CAAC,CAAC,cAAc,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,mBAAmB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QACtE,iGAAiG;QACjG,aAAa,CAAC,IAAI,OAAlB,aAAa,EAAS;YACpB,gDAA6B;YAC7B,oCAAuB;YACvB,mCAAsB;SACvB,EAAE;IACL,CAAC;IAED,EAAE,CAAC,CAAC,aAAa,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;QAC7B,mDAAmD;QACnD,MAAM,CAAC,0CAAmB,CAAC;YACzB,OAAO,SAAA;YACP,aAAa,eAAA;YACb,aAAa,eAAA;YACb,aAAa,eAAA;YACb,cAAc,gBAAA;YACd,MAAM,QAAA;SACP,CAAC,CAAC;IACL,CAAC;IAAC,IAAI,CAAC,EAAE,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC;QACzB,oCAAoC;QACpC,IAAM,EAAE,GAAG,IAAI,WAAW,CAAC,OAAO,CAAC,CAAC;QACpC,MAAM,CAAC;YACL,OAAO,SAAA;YACP,SAAS,EAAE,EAAE,CAAC,WAAW,CAAC;gBACxB,MAAM,EAAE,aAAa;gBACrB,IAAI,EAAE,cAAc,GAAM,cAAc,SAAM,GAAG,IAAI;gBACrD,cAAc,EAAE,IAAI;aACrB,CAAC;SACH,CAAC;IACJ,CAAC;IAAC,IAAI,CAAC,CAAC;QACN,MAAM,CAAC;YACL,OAAO,SAAA;YACP,SAAS,EAAE,IAAI;SAChB,CAAC;IACJ,CAAC;AACH,CAAC;AAzDD,kBAyDC","sourcesContent":["import { readFileSync } from 'fs';\r\nimport { RawSourceMap } from 'source-map';\r\nconst MagicString = require('magic-string');\r\n\r\nimport { getFoldFileTransformer } from './class-fold';\r\nimport { getImportTslibTransformer } from './import-tslib';\r\nimport { getPrefixFunctionsTransformer } from './prefix-functions';\r\nimport { getScrubFileTransformer } from './scrub-file';\r\nimport { transformJavascript } from './transform-javascript';\r\n\r\n\r\nconst HAS_DECORATORS = /decorators/;\r\nconst HAS_CTOR_PARAMETERS = /ctorParameters/;\r\nconst HAS_TS_HELPERS = /var (__extends|__decorate|__metadata|__param) = /;\r\n\r\nexport interface NgoOptions {\r\n  content?: string;\r\n  inputFilePath?: string;\r\n  outputFilePath?: string;\r\n  emitSourceMap?: boolean;\r\n  strict?: boolean;\r\n}\r\n\r\nexport function ngo(options: NgoOptions): { content: string, sourceMap: RawSourceMap | null } {\r\n  options.emitSourceMap = !!options.emitSourceMap;\r\n  const { inputFilePath, emitSourceMap, outputFilePath, strict } = options;\r\n  let { content } = options;\r\n\r\n  if (!inputFilePath && !content) {\r\n    throw new Error('Either filePath or content must be specified in options.');\r\n  }\r\n\r\n  if (!content) {\r\n    content = readFileSync(inputFilePath as string, 'UTF-8');\r\n  }\r\n\r\n  // Determine which transforms to apply.\r\n  const getTransforms = [];\r\n\r\n  if (HAS_TS_HELPERS.test(content)) {\r\n    getTransforms.push(getImportTslibTransformer);\r\n  }\r\n\r\n\r\n  if (HAS_DECORATORS.test(content) || HAS_CTOR_PARAMETERS.test(content)) {\r\n    // Order matters, getPrefixFunctionsTransformer needs to be called before getFoldFileTransformer.\r\n    getTransforms.push(...[\r\n      getPrefixFunctionsTransformer,\r\n      getScrubFileTransformer,\r\n      getFoldFileTransformer,\r\n    ]);\r\n  }\r\n\r\n  if (getTransforms.length > 0) {\r\n    // Only transform if there are transforms to apply.\r\n    return transformJavascript({\r\n      content,\r\n      getTransforms,\r\n      emitSourceMap,\r\n      inputFilePath,\r\n      outputFilePath,\r\n      strict,\r\n    });\r\n  } else if (emitSourceMap) {\r\n    // Emit a sourcemap with no changes.\r\n    const ms = new MagicString(content);\r\n    return {\r\n      content,\r\n      sourceMap: ms.generateMap({\r\n        source: inputFilePath,\r\n        file: outputFilePath ? `${outputFilePath}.map` : null,\r\n        includeContent: true,\r\n      }),\r\n    };\r\n  } else {\r\n    return {\r\n      content,\r\n      sourceMap: null,\r\n    };\r\n  }\r\n}\r\n"]}