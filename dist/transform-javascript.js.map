{"version":3,"file":"transform-javascript.js","sourceRoot":"","sources":["../src/transform-javascript.ts"],"names":[],"mappings":"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","sourcesContent":["import { readFileSync } from 'fs';\r\nimport { basename, dirname, join } from 'path';\r\nimport { RawSourceMap } from 'source-map';\r\nimport * as ts from 'typescript';\r\nconst MagicString = require('magic-string');\r\n\r\nimport { NgoOptions } from './ngo';\r\n\r\n\r\nexport interface TransformJavascriptOptions extends NgoOptions {\r\n  content: string;\r\n  getTransforms: Array<(program: ts.Program) => ts.TransformerFactory<ts.SourceFile>>;\r\n}\r\n\r\nexport const transformJavascript = (options: TransformJavascriptOptions) => {\r\n  options.emitSourceMap = !!options.emitSourceMap;\r\n  options.strict = !!options.strict;\r\n  const { content, getTransforms, emitSourceMap, inputFilePath, outputFilePath, strict } = options;\r\n\r\n  // Print error diagnostics.\r\n  const checkDiagnostics = (diagnostics: ts.Diagnostic[]) => {\r\n    if (diagnostics && diagnostics.length > 0) {\r\n      let errors = '';\r\n      errors = errors + '\\n' + ts.formatDiagnostics(diagnostics, {\r\n        getCurrentDirectory: () => ts.sys.getCurrentDirectory(),\r\n        getNewLine: () => ts.sys.newLine,\r\n        getCanonicalFileName: (f: string) => f,\r\n      });\r\n      return errors;\r\n    }\r\n  };\r\n\r\n  // Make a in-memory host and populate it with a single file\r\n  const fileMap = new Map<string, string>();\r\n  const sourcesMap = new Map<string, ts.SourceFile>();\r\n  const outputs = new Map<string, string>();\r\n\r\n  // We're not actually writing anything to disk, but still need to define an outDir\r\n  // because otherwise TS will fail to emit JS since it would overwrite the original.\r\n  const tempOutDir = '$$_temp/';\r\n  const tempFilename = 'ngo-default-file.js';\r\n  fileMap.set(tempFilename, content);\r\n\r\n  // We need to load the default lib for noEmitOnError to work properly.\r\n  const defaultLibFileName = 'lib.d.ts';\r\n  const defaultLibContent = readFileSync(join(dirname(require.resolve('typescript')), defaultLibFileName), 'UTF-8');\r\n  fileMap.set(defaultLibFileName, defaultLibContent);\r\n\r\n  fileMap.forEach((v, k) => sourcesMap.set(\r\n    k, ts.createSourceFile(k, v, ts.ScriptTarget.ES2015)));\r\n\r\n  const host: ts.CompilerHost = {\r\n    getSourceFile: (fileName) => sourcesMap.get(fileName)!,\r\n    getDefaultLibFileName: () => defaultLibFileName,\r\n    getCurrentDirectory: () => '',\r\n    getDirectories: () => [],\r\n    getCanonicalFileName: (fileName) => fileName,\r\n    useCaseSensitiveFileNames: () => true,\r\n    getNewLine: () => '\\n',\r\n    fileExists: (fileName) => fileMap.has(fileName),\r\n    readFile: (fileName) => fileMap.has(fileName) ? fileMap.get(fileName)! : '',\r\n    writeFile: (fileName, text) => outputs.set(fileName, text),\r\n  };\r\n\r\n  const tsOptions: ts.CompilerOptions = {\r\n    noEmitOnError: true,\r\n    allowJs: true,\r\n    // Using just line feed makes test comparisons easier, and doesn't matter for generated files.\r\n    newLine: ts.NewLineKind.LineFeed,\r\n    // We target next so that there is no downleveling.\r\n    target: ts.ScriptTarget.ESNext,\r\n    skipLibCheck: true,\r\n    outDir: '$$_temp/',\r\n    sourceMap: emitSourceMap,\r\n    inlineSources: emitSourceMap,\r\n    inlineSourceMap: false,\r\n  };\r\n\r\n  const program = ts.createProgram(Array.from(fileMap.keys()), tsOptions, host);\r\n\r\n  // We need the checker inside transforms.\r\n  const transforms = getTransforms.map((getTf) => getTf(program));\r\n\r\n  const { emitSkipped, diagnostics } = program.emit(\r\n    undefined, host.writeFile, undefined, undefined,\r\n    { before: transforms, after: [] });\r\n\r\n  let transformedContent = outputs.get(`${tempOutDir}${tempFilename}`);\r\n\r\n  if (emitSkipped || !transformedContent) {\r\n    // Throw only if we're in strict mode, otherwise return original content.\r\n    if (strict) {\r\n      throw new Error(`\r\n        TS failed with the following error messages:\r\n\r\n        ${checkDiagnostics(diagnostics)}\r\n      `);\r\n    } else {\r\n      return {\r\n        content,\r\n        sourceMap: !emitSourceMap ? null : new MagicString(content).generateMap({\r\n          source: inputFilePath,\r\n          file: outputFilePath ? `${outputFilePath}.map` : null,\r\n          includeContent: true,\r\n        }),\r\n      };\r\n    }\r\n  }\r\n\r\n  let sourceMap: RawSourceMap | null = null;\r\n\r\n  if (emitSourceMap) {\r\n    const tsSourceMap = outputs.get(`${tempOutDir}${tempFilename}.map`);\r\n    const urlRegExp = /^\\/\\/# sourceMappingURL=[^\\r\\n]*/gm;\r\n    sourceMap = JSON.parse(tsSourceMap as string) as RawSourceMap;\r\n    // Fix sourcemaps file references.\r\n    if (outputFilePath) {\r\n      sourceMap.file = basename(outputFilePath);\r\n      transformedContent = transformedContent.replace(urlRegExp, `//# sourceMappingURL=${sourceMap.file}.map\\n`);\r\n      if (inputFilePath) {\r\n        sourceMap.sources = [inputFilePath];\r\n      } else {\r\n        sourceMap.sources = [''];\r\n      }\r\n    } else {\r\n      // TODO: figure out if we should inline sources here.\r\n      transformedContent = transformedContent.replace(urlRegExp, '');\r\n      sourceMap.file = '';\r\n      sourceMap.sources = [''];\r\n    }\r\n  }\r\n\r\n  return {\r\n    content: transformedContent,\r\n    sourceMap,\r\n  };\r\n};\r\n"]}