{"version":3,"file":"import-tslib.js","sourceRoot":"","sources":["../src/import-tslib.ts"],"names":[],"mappings":"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","sourcesContent":["import * as ts from 'typescript';\r\n\r\n\r\nexport function getImportTslibTransformer(): ts.TransformerFactory<ts.SourceFile> {\r\n  return (context: ts.TransformationContext): ts.Transformer<ts.SourceFile> => {\r\n\r\n    const transformer: ts.Transformer<ts.SourceFile> = (sf: ts.SourceFile) => {\r\n\r\n      // Check if module has CJS exports. If so, use 'require()' instead of 'import'.\r\n      const useRequire = /exports.\\S+\\s*=/.test(sf.getText());\r\n\r\n      const visitor: ts.Visitor = (node: ts.Node): ts.Node => {\r\n\r\n        // Check if node is a TS helper declaration.\r\n        if (isTsHelper(node)) {\r\n          // Replace node with import for that helper.\r\n          return ts.visitEachChild(createTslibImport(node, useRequire), visitor, context);\r\n        }\r\n\r\n        // Otherwise return node as is.\r\n        return ts.visitEachChild(node, visitor, context);\r\n      };\r\n\r\n      return ts.visitNode(sf, visitor);\r\n    };\r\n    return transformer;\r\n  };\r\n}\r\n\r\nfunction createTslibImport(node: ts.Node, useRequire = false): ts.Node {\r\n  const name = getVariableStatementName(node);\r\n\r\n  if (!name) {\r\n    return node;\r\n  }\r\n\r\n  if (useRequire) {\r\n    // Use `var __helper = /*@__PURE__*/ require(\"tslib\").__helper`.\r\n    const requireCall = ts.createCall(ts.createIdentifier('require'), undefined, [ts.createLiteral('tslib')]);\r\n    const pureRequireCall = ts.addSyntheticLeadingComment(\r\n      requireCall, ts.SyntaxKind.MultiLineCommentTrivia, '@__PURE__', false);\r\n    const helperAccess = ts.createPropertyAccess(pureRequireCall, name);\r\n    const variableDeclaration = ts.createVariableDeclaration(name, undefined, helperAccess);\r\n    const variableStatement = ts.createVariableStatement(undefined, [variableDeclaration]);\r\n\r\n    return variableStatement;\r\n  } else {\r\n    // Use `import { __helper } from \"tslib\"`.\r\n    const namedImports = ts.createNamedImports([ts.createImportSpecifier(undefined, ts.createIdentifier(name))]);\r\n    // typescript@next is needed for a fix to the function parameter types of ts.createImportClause.\r\n    // https://github.com/Microsoft/TypeScript/pull/15999\r\n    const importClause = ts.createImportClause(undefined, namedImports);\r\n    const newNode = ts.createImportDeclaration(undefined, undefined, importClause, ts.createLiteral('tslib'));\r\n\r\n    return newNode;\r\n  }\r\n}\r\n\r\nfunction isTsHelper(node: ts.Node): boolean {\r\n  if (node.kind !== ts.SyntaxKind.VariableStatement) {\r\n    return false;\r\n  }\r\n  const varStmt = node as ts.VariableStatement;\r\n  if (varStmt.declarationList.declarations.length > 1) {\r\n    return false;\r\n  }\r\n  const varDecl = varStmt.declarationList.declarations[0];\r\n  if (varDecl.name.kind !== ts.SyntaxKind.Identifier) {\r\n    return false;\r\n  }\r\n\r\n  const name = getVariableStatementName(node);\r\n\r\n  if (!name) {\r\n    return false;\r\n  }\r\n\r\n  // TODO: there are more helpers than these, should we replace them all?\r\n  const tsHelpers = [\r\n    '__extends',\r\n    '__decorate',\r\n    '__metadata',\r\n    '__param',\r\n  ];\r\n\r\n  if (tsHelpers.indexOf(name) === -1) {\r\n    return false;\r\n  }\r\n\r\n  // TODO: maybe add a few more checks, like checking the first part of the assignment.\r\n\r\n  return true;\r\n}\r\n\r\nfunction getVariableStatementName(node: ts.Node) {\r\n  const varStmt = node as ts.VariableStatement;\r\n  if (varStmt.declarationList.declarations.length > 1) {\r\n    return null;\r\n  }\r\n  const varDecl = varStmt.declarationList.declarations[0];\r\n  if (varDecl.name.kind !== ts.SyntaxKind.Identifier) {\r\n    return null;\r\n  }\r\n\r\n  const name = (varDecl.name as ts.Identifier).text;\r\n\r\n  // node.getText() on a name that starts with two underscores will return three instead.\r\n  return name.replace(/^___/, '__');\r\n}\r\n"]}