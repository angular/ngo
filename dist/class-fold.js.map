{"version":3,"file":"class-fold.js","sourceRoot":"","sources":["../src/class-fold.ts"],"names":[],"mappings":";;AAAA,+BAAiC;AAcjC,gCAAuC,OAAmB;IACxD,IAAM,OAAO,GAAG,OAAO,CAAC,cAAc,EAAE,CAAC;IAEzC,MAAM,CAAC,UAAC,OAAiC;QAEvC,IAAM,WAAW,GAAkC,UAAC,EAAiB;YAEnE,IAAM,OAAO,GAAG,qBAAqB,CAAC,EAAE,CAAC,CAAC;YAC1C,IAAM,UAAU,GAAG,kCAAkC,CAAC,EAAE,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC;YAE5E,IAAM,OAAO,GAAe,UAAC,IAAa;gBACxC,8CAA8C;gBAC9C,EAAE,CAAC,CAAC,UAAU,CAAC,IAAI,CAAC,UAAC,EAAE,IAAK,OAAA,EAAE,CAAC,mBAAmB,KAAK,IAAI,EAA/B,CAA+B,CAAC,CAAC,CAAC,CAAC;oBAC7D,MAAM,CAAC,IAAW,CAAC;gBACrB,CAAC;gBAED,iDAAiD;gBACjD,IAAM,KAAK,GAAG,OAAO,CAAC,IAAI,CAAC,UAAC,EAAE,IAAK,OAAA,EAAE,CAAC,aAAa,KAAK,IAAI,EAAzB,CAAyB,CAAC,CAAC;gBAC9D,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;oBACV,IAAM,kBAAkB,GAAG,IAA6B,CAAC;oBAEzD,IAAM,cAAc,GAAG,KAAK,CAAC,UAAU,CAAC,GAAG,CAAC,UAAC,EAAE;wBAC7C,OAAA,EAAE,CAAC,eAAe,CAAC,EAAE,CAAC,mBAAmB,CAAC,UAAU,CAAC;oBAArD,CAAqD,CAAC,CAAC;oBAEzD,qEAAqE;oBACrE,yBAAyB;oBACzB,IAAM,OAAO,GAAG,EAAE,CAAC,WAAW,CACzB,kBAAkB,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,QAC/C,cAAc,EACd,kBAAkB,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,EAC/C,CAAC;oBAEH,IAAM,OAAO,GAAG,EAAE,CAAC,wBAAwB,CACzC,kBAAkB,CAAC,SAAS,EAC5B,kBAAkB,CAAC,aAAa,EAChC,kBAAkB,CAAC,IAAI,EACvB,kBAAkB,CAAC,cAAc,EACjC,kBAAkB,CAAC,UAAU,EAC7B,kBAAkB,CAAC,IAAI,EACvB,OAAO,CACR,CAAC;oBAEF,kCAAkC;oBAClC,MAAM,CAAC,EAAE,CAAC,cAAc,CAAC,OAAO,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC;gBACtD,CAAC;gBAED,+BAA+B;gBAC/B,MAAM,CAAC,EAAE,CAAC,cAAc,CAAC,IAAI,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC;YACnD,CAAC,CAAC;YAEF,MAAM,CAAC,EAAE,CAAC,SAAS,CAAC,EAAE,EAAE,OAAO,CAAC,CAAC;QACnC,CAAC,CAAC;QACF,MAAM,CAAC,WAAW,CAAC;IACrB,CAAC,CAAC;AACJ,CAAC;AAtDD,wDAsDC;AAED,+BAA+B,IAAa;IAC1C,IAAM,OAAO,GAAgB,EAAE,CAAC;IAChC,2DAA2D;IAC3D,EAAE,CAAC,YAAY,CAAC,IAAI,EAAE,UAAC,KAAK;QAC1B,EAAE,CAAC,CAAC,KAAK,CAAC,IAAI,KAAK,EAAE,CAAC,UAAU,CAAC,iBAAiB,CAAC,CAAC,CAAC;YACnD,MAAM,CAAC;QACT,CAAC;QACD,IAAM,OAAO,GAAG,KAA6B,CAAC;QAC9C,EAAE,CAAC,CAAC,OAAO,CAAC,eAAe,CAAC,YAAY,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;YACpD,MAAM,CAAC;QACT,CAAC;QACD,IAAM,OAAO,GAAG,OAAO,CAAC,eAAe,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;QACxD,EAAE,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,KAAK,EAAE,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC,CAAC;YACnD,MAAM,CAAC;QACT,CAAC;QACD,IAAM,IAAI,GAAI,OAAO,CAAC,IAAsB,CAAC,IAAI,CAAC;QAClD,IAAM,IAAI,GAAG,OAAO,CAAC,WAAW,CAAC;QACjC,EAAE,CAAC,CAAC,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,KAAK,EAAE,CAAC,UAAU,CAAC,uBAAuB,CAAC,CAAC,CAAC;YACjE,MAAM,CAAC;QACT,CAAC;QACD,EAAE,CAAC,CAAE,IAAmC,CAAC,UAAU,CAAC,IAAI,KAAK,EAAE,CAAC,UAAU,CAAC,cAAc,CAAC,CAAC,CAAC;YAC1F,MAAM,CAAC;QACT,CAAC;QACD,IAAM,QAAQ,GAAI,IAAmC,CAAC,UAA+B,CAAC;QACtF,EAAE,CAAC,CAAC,QAAQ,CAAC,UAAU,CAAC,IAAI,KAAK,EAAE,CAAC,UAAU,CAAC,kBAAkB,CAAC,CAAC,CAAC;YAClE,MAAM,CAAC;QACT,CAAC;QACD,IAAM,EAAE,GAAG,QAAQ,CAAC,UAAmC,CAAC;QACxD,EAAE,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;YAClC,MAAM,CAAC;QACT,CAAC;QACD,EAAE,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,IAAI,KAAK,EAAE,CAAC,UAAU,CAAC,mBAAmB,CAAC,CAAC,CAAC;YACrE,MAAM,CAAC;QACT,CAAC;QACD,IAAM,OAAO,GAAG,EAAE,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAA2B,CAAC;QAChE,EAAE,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,IAAI,KAAK,EAAE,CAAC,UAAU,CAAC,eAAe,CAAC,CAAC,CAAC;YAC7F,MAAM,CAAC;QACT,CAAC;QACD,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,IAAI,OAAO,CAAC,IAAI,CAAC,IAAI,KAAK,EAAE,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC,CAAC;YACpE,MAAM,CAAC;QACT,CAAC;QACD,EAAE,CAAC,CAAE,OAAO,CAAC,IAAsB,CAAC,IAAI,KAAK,IAAI,CAAC,CAAC,CAAC;YAClD,MAAM,CAAC;QACT,CAAC;QACD,OAAO,CAAC,IAAI,CAAC;YACX,IAAI,MAAA;YACJ,KAAK,EAAE,OAAO;YACd,aAAa,EAAE,EAAE;YACjB,UAAU,EAAE,EAAE;SACf,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,MAAM,CAAC,OAAO,CAAC;AACjB,CAAC;AAED,4CAA4C,IAAa,EAAE,OAAuB,EAChF,OAAoB;IAEpB,IAAM,UAAU,GAAoB,EAAE,CAAC;IAEvC,mDAAmD;IACnD,EAAE,CAAC,YAAY,CAAC,IAAI,EAAE,UAAC,KAAK;QAC1B,EAAE,CAAC,CAAC,KAAK,CAAC,IAAI,KAAK,EAAE,CAAC,UAAU,CAAC,mBAAmB,CAAC,CAAC,CAAC;YACrD,MAAM,CAAC;QACT,CAAC;QACD,IAAM,mBAAmB,GAAG,KAA+B,CAAC;QAC5D,EAAE,CAAC,CAAC,mBAAmB,CAAC,UAAU,CAAC,IAAI,KAAK,EAAE,CAAC,UAAU,CAAC,gBAAgB,CAAC,CAAC,CAAC;YAC3E,MAAM,CAAC;QACT,CAAC;QACD,IAAM,KAAK,GAAG,mBAAmB,CAAC,UAAiC,CAAC;QACpE,EAAE,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,KAAK,EAAE,CAAC,UAAU,CAAC,wBAAwB,CAAC,CAAC,CAAC;YAC/D,MAAM,CAAC;QACT,CAAC;QACD,IAAM,UAAU,GAAG,KAAK,CAAC,IAAmC,CAAC;QAC7D,EAAE,CAAC,CAAC,UAAU,CAAC,UAAU,CAAC,IAAI,KAAK,EAAE,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC,CAAC;YAC5D,MAAM,CAAC;QACT,CAAC;QAED,IAAM,MAAM,GAAG,OAAO,CAAC,mBAAmB,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC;QAClE,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;YACZ,MAAM,CAAC;QACT,CAAC;QAED,IAAM,KAAK,GAAG,MAAM,CAAC,YAAY,CAAC;QAClC,EAAE,CAAC,CAAC,KAAK,KAAK,SAAS,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;YAC9C,MAAM,CAAC;QACT,CAAC;QACD,IAAM,QAAQ,GAAG,OAAO,CAAC,GAAG,CAAC,UAAC,KAAK,IAAK,OAAA,KAAK,CAAC,KAAK,EAAX,CAAW,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAA2B,CAAC,CAAC;QACjG,EAAE,CAAC,CAAC,QAAQ,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;YACpB,MAAM,CAAC;QACT,CAAC;QACD,IAAM,SAAS,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;QACpC,IAAM,SAAS,GAAkB,EAAE,mBAAmB,qBAAA,EAAE,SAAS,WAAA,EAAE,CAAC;QAEpE,SAAS,CAAC,UAAU,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QACrC,UAAU,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;IAC7B,CAAC,CAAC,CAAC;IACH,MAAM,CAAC,UAAU,CAAC;AACpB,CAAC","sourcesContent":["import * as ts from 'typescript';\r\n\r\ninterface ClassData {\r\n  name: string;\r\n  class: ts.VariableDeclaration;\r\n  classFunction: ts.FunctionExpression;\r\n  statements: StatementData[];\r\n}\r\n\r\ninterface StatementData {\r\n  expressionStatement: ts.ExpressionStatement;\r\n  hostClass: ClassData;\r\n}\r\n\r\nexport function getFoldFileTransformer(program: ts.Program): ts.TransformerFactory<ts.SourceFile> {\r\n  const checker = program.getTypeChecker();\r\n\r\n  return (context: ts.TransformationContext): ts.Transformer<ts.SourceFile> => {\r\n\r\n    const transformer: ts.Transformer<ts.SourceFile> = (sf: ts.SourceFile) => {\r\n\r\n      const classes = findClassDeclarations(sf);\r\n      const statements = findClassStaticPropertyAssignments(sf, checker, classes);\r\n\r\n      const visitor: ts.Visitor = (node: ts.Node): ts.Node => {\r\n        // Check if node is a statement to be dropped.\r\n        if (statements.find((st) => st.expressionStatement === node)) {\r\n          return null as any;\r\n        }\r\n\r\n        // Check if node is a class to add statements to.\r\n        const clazz = classes.find((cl) => cl.classFunction === node);\r\n        if (clazz) {\r\n          const functionExpression = node as ts.FunctionExpression;\r\n\r\n          const newExpressions = clazz.statements.map((st) =>\r\n            ts.createStatement(st.expressionStatement.expression));\r\n\r\n          // Create a new body with all the original statements, plus new ones,\r\n          // plus return statement.\r\n          const newBody = ts.createBlock([\r\n            ...functionExpression.body.statements.slice(0, -1),\r\n            ...newExpressions,\r\n            ...functionExpression.body.statements.slice(-1),\r\n          ]);\r\n\r\n          const newNode = ts.createFunctionExpression(\r\n            functionExpression.modifiers,\r\n            functionExpression.asteriskToken,\r\n            functionExpression.name,\r\n            functionExpression.typeParameters,\r\n            functionExpression.parameters,\r\n            functionExpression.type,\r\n            newBody,\r\n          );\r\n\r\n          // Replace node with modified one.\r\n          return ts.visitEachChild(newNode, visitor, context);\r\n        }\r\n\r\n        // Otherwise return node as is.\r\n        return ts.visitEachChild(node, visitor, context);\r\n      };\r\n\r\n      return ts.visitNode(sf, visitor);\r\n    };\r\n    return transformer;\r\n  };\r\n}\r\n\r\nfunction findClassDeclarations(node: ts.Node): ClassData[] {\r\n  const classes: ClassData[] = [];\r\n  // Find all class declarations, build a ClassData for each.\r\n  ts.forEachChild(node, (child) => {\r\n    if (child.kind !== ts.SyntaxKind.VariableStatement) {\r\n      return;\r\n    }\r\n    const varStmt = child as ts.VariableStatement;\r\n    if (varStmt.declarationList.declarations.length > 1) {\r\n      return;\r\n    }\r\n    const varDecl = varStmt.declarationList.declarations[0];\r\n    if (varDecl.name.kind !== ts.SyntaxKind.Identifier) {\r\n      return;\r\n    }\r\n    const name = (varDecl.name as ts.Identifier).text;\r\n    const expr = varDecl.initializer;\r\n    if (!expr || expr.kind !== ts.SyntaxKind.ParenthesizedExpression) {\r\n      return;\r\n    }\r\n    if ((expr as ts.ParenthesizedExpression).expression.kind !== ts.SyntaxKind.CallExpression) {\r\n      return;\r\n    }\r\n    const callExpr = (expr as ts.ParenthesizedExpression).expression as ts.CallExpression;\r\n    if (callExpr.expression.kind !== ts.SyntaxKind.FunctionExpression) {\r\n      return;\r\n    }\r\n    const fn = callExpr.expression as ts.FunctionExpression;\r\n    if (fn.body.statements.length < 2) {\r\n      return;\r\n    }\r\n    if (fn.body.statements[0].kind !== ts.SyntaxKind.FunctionDeclaration) {\r\n      return;\r\n    }\r\n    const innerFn = fn.body.statements[0] as ts.FunctionDeclaration;\r\n    if (fn.body.statements[fn.body.statements.length - 1].kind !== ts.SyntaxKind.ReturnStatement) {\r\n      return;\r\n    }\r\n    if (!innerFn.name || innerFn.name.kind !== ts.SyntaxKind.Identifier) {\r\n      return;\r\n    }\r\n    if ((innerFn.name as ts.Identifier).text !== name) {\r\n      return;\r\n    }\r\n    classes.push({\r\n      name,\r\n      class: varDecl,\r\n      classFunction: fn,\r\n      statements: [],\r\n    });\r\n  });\r\n\r\n  return classes;\r\n}\r\n\r\nfunction findClassStaticPropertyAssignments(node: ts.Node, checker: ts.TypeChecker,\r\n  classes: ClassData[]): StatementData[] {\r\n\r\n  const statements: StatementData[] = [];\r\n\r\n  // Find each assignment outside of the declaration.\r\n  ts.forEachChild(node, (child) => {\r\n    if (child.kind !== ts.SyntaxKind.ExpressionStatement) {\r\n      return;\r\n    }\r\n    const expressionStatement = child as ts.ExpressionStatement;\r\n    if (expressionStatement.expression.kind !== ts.SyntaxKind.BinaryExpression) {\r\n      return;\r\n    }\r\n    const binEx = expressionStatement.expression as ts.BinaryExpression;\r\n    if (binEx.left.kind !== ts.SyntaxKind.PropertyAccessExpression) {\r\n      return;\r\n    }\r\n    const propAccess = binEx.left as ts.PropertyAccessExpression;\r\n    if (propAccess.expression.kind !== ts.SyntaxKind.Identifier) {\r\n      return;\r\n    }\r\n\r\n    const symbol = checker.getSymbolAtLocation(propAccess.expression);\r\n    if (!symbol) {\r\n      return;\r\n    }\r\n\r\n    const decls = symbol.declarations;\r\n    if (decls === undefined || decls.length !== 1) {\r\n      return;\r\n    }\r\n    const classIdx = classes.map((clazz) => clazz.class).indexOf(decls[0] as ts.VariableDeclaration);\r\n    if (classIdx === -1) {\r\n      return;\r\n    }\r\n    const hostClass = classes[classIdx];\r\n    const statement: StatementData = { expressionStatement, hostClass };\r\n\r\n    hostClass.statements.push(statement);\r\n    statements.push(statement);\r\n  });\r\n  return statements;\r\n}\r\n"]}